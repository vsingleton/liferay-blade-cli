import de.undercouch.gradle.tasks.download.Download

buildscript {
	dependencies {
		classpath group: "biz.aQute.bnd", name: "biz.aQute.bnd.gradle", version: "3.5.0"
		classpath group: "de.undercouch", name: "gradle-download-task", version: "3.3.0"
	    classpath 'net.researchgate:gradle-release:2.6.0'
	}

	repositories {
		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		    url 'https://plugins.gradle.org/m2/'
		}
	}
}

apply plugin: 'net.researchgate.release'
apply plugin: "biz.aQute.bnd.builder"
apply plugin: "java"
apply plugin: "maven-publish"

task bladeExtensionsVersions
task cliSourcesJar(type: Jar)
task cliTestJar(type: Jar, dependsOn: testClasses)
task copyMavenProfileJar(type: Copy)
task createToolingZip(type:Zip)
task createWrapperZip(type:Zip)
task downloadPortal(type: Download)
task unzipPortal(type: Copy)

configurations {
	bladeExtensions {
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
		transitive = false
	}

	testApi
}

artifacts {
	 testApi cliTestJar
}

clean.doFirst {
	delete "${buildDir}/tooling.zip", "${buildDir}/wrapper.zip"
}

cliSourcesJar {
	classifier = "sources"
	from sourceSets.main.allJava
}

cliTestJar {
	classifier = "tests"
	from sourceSets.test.output
}

createWrapperZip {
	from "${rootProject.projectDir}"
	archiveName = "wrapper.zip"
	destinationDir = new File("${buildDir}")
	include "gradle/**"
	include "gradlew*"
}

dependencies {
	bladeExtensions group: "com.liferay.blade", name: "com.liferay.blade.extensions.maven.profile", version: "latest.integration", changing: true

	compile group: "biz.aQute.bnd", name: "biz.aQute.bndlib", version: "3.5.0"
	compile group: "com.liferay", name: "com.liferay.gogo.shell.client", version: "1.0.0"
	compile group: "com.liferay", name: "com.liferay.project.templates", version: "4.2.9"
	compile group: "commons-io", name: "commons-io", version: "2.6"
	compile group: "org.apache.commons", name: "commons-lang3", version: "3.4"
	compile group: "org.apache.maven", name: "maven-aether-provider", version: "3.3.9"
	compile group: "org.apache.maven", name: "maven-settings", version: "3.3.9"
	compile group: "org.apache.maven", name: "maven-settings-builder", version: "3.3.9"
	compile group: "org.eclipse.aether", name: "aether-api", version: "1.0.2.v20150114"
	compile group: "org.eclipse.aether", name: "aether-connector-basic", version: "1.0.2.v20150114"
	compile group: "org.eclipse.aether", name: "aether-impl", version: "1.0.2.v20150114"
	compile group: "org.eclipse.aether", name: "aether-spi", version: "1.0.2.v20150114"
	compile group: "org.eclipse.aether", name: "aether-transport-classpath", version: "1.0.2.v20150114"
	compile group: "org.eclipse.aether", name: "aether-transport-file", version: "1.0.2.v20150114"
	compile group: "org.eclipse.aether", name: "aether-transport-http", version: "1.0.2.v20150114"
	compile group: "org.eclipse.aether", name: "aether-transport-wagon", version: "1.0.2.v20150114"
	compile group: "org.eclipse.aether", name: "aether-util", version: "1.0.2.v20150114"
	compile group: "org.fusesource.jansi", name: "jansi", version: "1.17.1"
	compile group: "org.gradle", name: "gradle-base-services-groovy", version: "4.10.2"
	compile group: "org.gradle", name: "gradle-core", version: "4.10.2"
	compile group: "org.gradle", name: "gradle-tooling-api", version: "4.10.2"
	compile group: "org.jsoup", name: "jsoup", version: "1.11.3"
	compile name: "org.objectweb.asm-6.0.0"
	compile name: "org.objectweb.asm.analysis-6.0.0"
	compile name: "org.objectweb.asm.commons-6.0.0"
	compile name: "org.objectweb.asm.tree-6.0.0"
	compile name: "org.objectweb.asm.util-6.0.0"
	compile project(":gradle-tooling")

	compileOnly group: "org.osgi", name: "osgi.core", version: "6.0.0"

	testCompile gradleTestKit()
	testCompile group: "com.googlecode.java-diff-utils", name: "diffutils", version: "1.3.0"
	testCompile group: "junit", name: "junit", version: "4.12"
	testCompile group: "net.diibadaaba.zipdiff", name: "zipdiff", version: "1.0"
	testCompile group: "org.easymock", name: "easymock", version: "3.5.1"
	testCompile group: "org.osgi", name: "osgi.core", version: "6.0.0"
	testCompile group: "org.powermock", name: "powermock-api-easymock", version: "1.7.3"
	testCompile group: "org.powermock", name: "powermock-classloading-xstream", version: "1.7.3"
	testCompile group: "org.powermock", name: "powermock-module-junit4", version: "1.7.3"
	testCompile group: "org.powermock", name: "powermock-module-junit4-rule", version: "1.7.3"
	testCompile group: "org.zeroturnaround", name: "zt-process-killer", version: "1.9"
}

downloadPortal {
	src "https://releases-cdn.liferay.com/portal/7.0.3-ga4/liferay-ce-portal-tomcat-7.0-ga4-20170613175008905.zip"
	dest new File("${System.getProperty('user.home')}/.liferay/bundles", 'liferay-ce-portal-tomcat-7.0-ga4-20170613175008905.zip')
	onlyIfNewer true
}

jar {
	archiveName = "blade.jar"
	from createToolingZip, createWrapperZip
}

processResources {
	from configurations.bladeExtensions
	from bladeExtensionsVersions
}

bladeExtensionsVersions {
	File bladeExtensionsVersionsFile = new File(buildDir, "blade-extensions-versions.properties")

	outputs.file(bladeExtensionsVersionsFile)

	Properties properties = new Properties()

	doFirst {
		configurations.bladeExtensions.resolvedConfiguration.resolvedArtifacts.each {
			properties.setProperty(it.name, it.moduleVersion.id.version)
		}

	}

	doLast {
		properties.store(bladeExtensionsVersionsFile.newWriter(), null)
	}
}

project(":gradle-tooling").afterEvaluate { tooling ->
	createToolingZip {
		archiveName = "tooling.zip"
		dependsOn ":gradle-tooling:jar"
		destinationDir = new File("${buildDir}")
		from tooling.jar.archivePath
	}
}

publishing {
	publications {
		cliJar(MavenPublication) {
			artifactId = "com.liferay.blade.cli"

			pom.withXml {
				Node pom = asNode()
				pom.remove(pom.get("dependencies"))
			}

			from components.java

			artifact cliSourcesJar
			artifact cliTestJar
		}
	}
}

String repoHost = "repository-cdn.liferay.com"

if (project.hasProperty("release") || project.hasProperty("snapshots")) {
	repoHost = "repository.liferay.com"
}

repositories {
	flatDir {
		dirs "${rootProject.projectDir}/libs"
	}

	if (project.hasProperty("localNexus")) {
		maven {
			url "http://localhost:8081/nexus/content/groups/public/"
		}
	}

	maven {
		url "https://repo.gradle.org/gradle/libs-releases/"
	}

	maven {
		url "https://${repoHost}/nexus/content/repositories/liferay-public-releases/"
	}

	maven {
		url "https://${repoHost}/nexus/content/repositories/liferay-public-snapshots/"
	}
}

sourceSets {
	zips {
		resources {
			srcDir "${buildDir}"
			include "tooling.zip"
			include "wrapper.zip"
		}
	}
	test {
		runtimeClasspath += sourceSets.zips.output
	}
}

release {
    git {
	    requireBranch = ''
	}
}

test {
	dependsOn jar, unzipPortal

	systemProperty "bladeJarPath", jar.archivePath
	systemProperty "buildDir", "${buildDir}"
	systemProperty "liferay.home", "${buildDir}/liferay-ce-portal-7.0-ga4"
	systemProperty "jna.nosys", "true"
	systemProperty "testOutputPath", sourceSets.test.output.classesDirs.singleFile.absolutePath

	project(":extensions:bad-command").afterEvaluate { project ->
		dependsOn project.jar
		systemProperty "badCommandJarFile", project.jar.archivePath
	}

	project(":extensions:sample-command").afterEvaluate { project ->
		dependsOn project.jar
		systemProperty "sampleCommandJarFile", project.jar.archivePath
	}

	project(":extensions:sample-profile").afterEvaluate { project ->
		dependsOn project.jar
		systemProperty "sampleProfileJarFile", project.jar.archivePath
	}

	project(":extensions:sample-template").afterEvaluate { project ->
		dependsOn project.jar
		systemProperty "sampleTemplateJarFile", project.jar.archivePath
	}

	int availableProcessors = Runtime.runtime.availableProcessors()

	int forks = 1

	if (!debug && project.hasProperty("parallel")) {
		if (availableProcessors > 4) {

			forks = availableProcessors - 2
		}
		else if (availableProcessors > 2) {

			forks = availableProcessors - 1
		}
	}

	maxParallelForks = forks
}

unzipPortal {
	dependsOn downloadPortal
	from zipTree(downloadPortal.dest)
	into buildDir
}

version = "3.5.1-SNAPSHOT"

apply from: "blade-jar-smoke-tests.gradle"